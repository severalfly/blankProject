/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Consumer;

import geography.GeographicPoint;
import util.GraphLoader;

/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which represents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
public class MapGraph
{
	//TODO: Add your member variables here in WEEK 2
	/**
	 * 保存的是顶点与顶点的出口进口点列表。先出后入，就是说正常节点会有两个list ，第一个为出口列表，第二个为入口列表
	 */
	private HashMap<GeographicPoint, List<LinkedList<RoadLineInfo>>> pointMap;

	/** 
	 * Create a new empty MapGraph 
	 */
	public MapGraph()
	{
		// TODO: Implement in this constructor in WEEK 2
		this.pointMap = new HashMap<>();
	}

	/**
	 * Get the number of vertices (road intersections) in the graph
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices()
	{
		//TODO: Implement this method in WEEK 2
		return this.pointMap.keySet().size();
	}

	/**
	 * Return the intersections, which are the vertices in this graph.
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices()
	{
		//TODO: Implement this method in WEEK 2
		return this.pointMap.keySet();
	}

	/**
	 * Get the number of road segments in the graph
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges()
	{
		//TODO: Implement this method in WEEK 2
		int result = 0;
		// 遍历所有的顶点
		for (Entry<GeographicPoint, List<LinkedList<RoadLineInfo>>> map : this.pointMap.entrySet())
		{
			for (LinkedList<RoadLineInfo> list : map.getValue())
			{
				result += list.size();
			}
		}
		// 考虑到每条路有两个节点，会重复计算一次
		return result / 2;
	}

	/** Add a node corresponding to an intersection at a Geographic Point
	 * If the location is already in the graph or null, this method does 
	 * not change the graph.
	 * @param location  The location of the intersection
	 * @return true if a node was added, false if it was not (the node
	 * was already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location)
	{
		// TODO: Implement this method in WEEK 2

		if (location.equals(null))
		{
			return false;
		}
		List<LinkedList<RoadLineInfo>> value = this.pointMap.get(location);
		if (value != null)
		{
			return false;
		}
		List<LinkedList<RoadLineInfo>> list = new LinkedList<>();
		this.pointMap.put(location, list);
		return true;
	}

	/**
	 * Adds a directed edge to the graph from pt1 to pt2.  
	 * Precondition: Both GeographicPoints have already been added to the graph
	 * @param from The starting point of the edge
	 * @param to The ending point of the edge
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 * @param length The length of the road, in km
	 * @throws IllegalArgumentException If the points have not already been
	 *   added as nodes to the graph, if any of the arguments is null,
	 *   or if the length is less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName, String roadType, double length) throws IllegalArgumentException
	{

		//TODO: Implement this method in WEEK 2

		//		0. 检查参数是否符合要求
		if (roadName == null || roadType == null || length <= 0)
		{
			throw new IllegalArgumentException();
		}
		List<LinkedList<RoadLineInfo>> pt1Infos = this.pointMap.get(from);
		List<LinkedList<RoadLineInfo>> pt2Infos = this.pointMap.get(to);

		if (pt1Infos == null || pt2Infos == null)
		{
			throw new IllegalArgumentException();
		}
		// new 出来一条路
		RoadLineInfo roadLineInfo = new RoadLineInfo(from, to, roadName, roadType, length);
		//		1. 向出口顶点添加 to点
		if (pt1Infos.size() == 0)
		{
			pt1Infos = new ArrayList<LinkedList<RoadLineInfo>>();
			pt1Infos.add(new LinkedList<RoadLineInfo>());
			pt1Infos.add(new LinkedList<RoadLineInfo>());
			this.pointMap.put(from, pt1Infos);
		}
		List<RoadLineInfo> outgoing = pt1Infos.get(0);
		outgoing.add(roadLineInfo);

		//		2. 向进口顶点添加 from 点
		if (pt2Infos.size() == 0)
		{
			pt2Infos = new ArrayList<LinkedList<RoadLineInfo>>();
			pt2Infos.add(new LinkedList<RoadLineInfo>());
			pt2Infos.add(new LinkedList<RoadLineInfo>());
			this.pointMap.put(to, pt2Infos);
		}
		List<RoadLineInfo> incoming = pt2Infos.get(1);
		incoming.add(roadLineInfo);

	}

	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal)
	{
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return bfs(start, goal, temp);
	}

	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 2

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());

		Queue<GeographicPoint> queue = new LinkedBlockingQueue<>();

		return null;
	}

	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal)
	{
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return dijkstra(start, goal, temp);
	}

	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 3

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());

		return null;
	}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal)
	{
		// Dummy variable for calling the search algorithms
		Consumer<GeographicPoint> temp = (x) -> {
		};
		return aStarSearch(start, goal, temp);
	}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 3

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());

		return null;
	}

	public static void main(String[] args)
	{
		System.out.print("Making a new map...");
		MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", theMap);
		System.out.println("DONE.");

		// You can use this method for testing.  

		/* Use this code in Week 3 End of Week Quiz
		MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");
		
		GeographicPoint start = new GeographicPoint(32.8648772, -117.2254046);
		GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
		
		
		List<GeographicPoint> route = theMap.dijkstra(start,end);
		List<GeographicPoint> route2 = theMap.aStarSearch(start,end);
		
		*/

	}

}

//A class to store information about the lines in the road files.
class RoadLineInfo
{
	GeographicPoint point1;
	GeographicPoint point2;

	String roadName;
	String roadType;

	double length;

	/** Create a new RoadLineInfo object to store information about the line 
	 * read from the file
	 * @param p1 One of the points
	 * @param p2 The other point
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 */
	RoadLineInfo(GeographicPoint p1, GeographicPoint p2, String roadName, String roadType, double length)
	{
		point1 = p1;
		point2 = p2;
		this.roadName = roadName;
		this.roadType = roadType;
		this.length = length;
	}

	/** Get the other point from this roadLineInfo */
	public GeographicPoint getOtherPoint(GeographicPoint pt)
	{
		if (pt == null)
			throw new IllegalArgumentException();
		if (pt.equals(point1))
		{
			return point2;
		}
		else if (pt.equals(point2))
		{
			return point1;
		}
		else
			throw new IllegalArgumentException();
	}

	/** Two RoadLineInfo objects are considered equal if they have the same
	 * two points and the same roadName and roadType.
	 */
	public boolean equals(Object o)
	{
		if (o == null || !(o instanceof RoadLineInfo))
		{
			return false;
		}
		RoadLineInfo info = (RoadLineInfo) o;
		return info.point1.equals(this.point1) && info.point2.equals(this.point2) && info.roadType.equals(this.roadType)
				&& info.roadName.equals(this.roadName) && sameLength(info.length, this.length);

	}

	/** Calculate the hashCode based on the hashCodes of the two points
	 * @return The hashcode for this object.
	 */
	public int hashCode()
	{
		return point1.hashCode() + point2.hashCode();

	}

	/** Returns whether these segments are part of the same road in terms of
	 * road name and road type.
	 * @param info The RoadLineInfo to compare against.
	 * @return true if these represent the same road, false otherwise.
	 */
	public boolean sameRoad(RoadLineInfo info)
	{
		return info.roadName.equals(this.roadName) && info.roadType.equals(this.roadType) && sameLength(info.length, this.length);
	}

	/** Return a copy of this LineInfo in the other direction */
	public RoadLineInfo getReverseCopy()
	{
		return new RoadLineInfo(this.point2, this.point1, this.roadName, this.roadType, this.length);
	}

	/** Return true if this road is the same segment as other, but in reverse
	 *   Otherwise return false.
	 */
	public boolean isReverse(RoadLineInfo other)
	{
		return this.point1.equals(other.point2) && this.point2.equals(other.point1) && this.roadName.equals(other.roadName)
				&& this.roadType.equals(other.roadType) && sameLength(this.length, other.length);
	}

	/** Return the string representation of this LineInfo. */
	public String toString()
	{
		return this.point1 + " " + this.point2 + " " + this.roadName + " " + this.roadType + " " + this.length;

	}

	public boolean sameLength(double l1, double l2)
	{
		return l1 - l2 >= 0.000001 && l1 - l2 <= 0.000001;
	}

}
